#!/usr/bin/env node

const argv = require('minimist')(process.argv.slice(2));
const fs = require('fs');
const path = require('path');
const request = require('request');
const cheerio = require('cheerio');
const mkdirp = require('mkdirp');
const url = require('url');

if (!argv.i || ! argv.o) {
    console.error("Should use with -i url -o folder parameters");
    process.exit(1);
}

let folder = argv.o;


let time = () => (new Date()).getTime();

let die = (msg) => {
    console.error(msg);
    process.exit(1);
}

let checkFolder = () => {
    if (fs.existsSync(folder)) {
        if (!fs.lstatSync(folder).isDirectory()) {
            die("Output path should be a directory!");
        } else {
            console.warn("Specified folder exists, will write in /pnrm-dl subfolder");
            folder = path.join(folder, "pnrm-dl");
            mkdirp.sync(folder);
        }
    } else {
        mkdirp.sync(folder);
    }
}

checkFolder();


let counter = 0;
let globalStart = time();

request(argv.i, (error, response, body) => {
    if (error !== null) {
        die(`Error occured loading ${argv.i} ${error}`);
    }
    let $ = cheerio.load(body);
    let $profile = $('#profile_name');
    if (!$profile.length) {
        $profile = $('#user_profile_info');
    }
    if (!$profile.length) {
        die(`Seems like input url is not panoramio page,
            should be either profile page or single image page`);
    }
    folder = path.join(folder, $profile.text().trim().replace(/\s+/g, '_'));
    mkdirp.sync(folder);
    loadImg(argv.i, folder);
});

let loadImg = (pageUrl, folder) => {
    let start = time();
    request(pageUrl, (error, response, body) => {
        if (error !== null) {
            console.error(`Error occured loading ${pageUrl} ${error}`);
        }
        let $ = cheerio.load(body);
        let $thumb = $('.user-page_photo_thumb');
        if ($thumb.length > 0) {
            //we're on the list page
            return loadImg(url.resolve(pageUrl, $thumb.first().find('a').attr('href')), folder);
        } else if ($('#main-photo').length) {
            let $img = $('#main-photo img');
            let bigImgUrl = $img.attr('src');
            let title = $img.attr('alt') || '';
            let bigImgName = title.replace(/[/., ]+/g, "_").trim();
            if (bigImgName.length > 127) {
                console.log(`${bigImgName} too long, will have to trim`);
                bigImgName = bigImgName.substr(0, 127);
            }
            
            let fullImgName = `${bigImgName}_${pageUrl.split('/').pop()}.${bigImgUrl.split('.').pop()}`;

            request.head(bigImgUrl, (err, res, body) => {
                try {
                    request(bigImgUrl).pipe(fs.createWriteStream(path.join(folder, fullImgName))).on('close', () => 
                        console.log(`(${++counter}) ${fullImgName} in ${(time() - start)} ms`));
                } catch (e) {
                    console.error(e);
                }
            });

            let nextImg = $('img[src="/img/next-uphoto.png"]').closest('a');
            if (nextImg.length > 0) {
                loadImg(url.resolve(pageUrl, nextImg.attr('href')), folder);
            } else {
                let globalTime = time() - globalStart;
                console.log(`Loaded ${counter} images in ${globalTime} ms`);
                process.exit(0);
            }
        }
    });
}